{
  "info": {
    "_postman_id": "f27a68a4-63ad-4a64-9200-2f5873ab21d0",
    "name": "Test Explore With Me - Feature Comments",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "39461099"
  },
  "item": [
    {
      "name": "Validation",
      "item": [
        {
          "name": "Добавление пустого комментария",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"userId\", user.id);\r",
                  "\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        pm.collectionVariables.set(\"eventId\", event.id);\r",
                  "        \r",
                  "        const author = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"authorId\", author.id);\r",
                  "\r",
                  "        const text = null;\r",
                  "\r",
                  "        const comment = {\r",
                  "            text: text,\r",
                  "        };\r",
                  "\r",
                  "        pm.request.body.update({\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(comment),\r",
                  "            options: { raw: { language: 'json' } }\r",
                  "        });\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "        throw err;\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "main();"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Запрос с текстом равным null должен вернуть ошибку 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "\r",
                  "    const response = pm.response.json();\r",
                  "    console.log(\"Ответ сервера:\", response);\r",
                  "\r",
                  "    pm.expect(response).to.have.property('status');\r",
                  "    pm.expect(response).to.have.property('reason');\r",
                  "    pm.expect(response).to.have.property('message');\r",
                  "    pm.expect(response).to.have.property('timestamp');\r",
                  "\r",
                  "    pm.expect(response.status).to.equal('400 BAD_REQUEST', 'Статус должен быть 400 BAD_REQUEST');\r",
                  "    pm.expect(response.reason).to.equal('Method argument not valid', 'Причина должна быть \"Method argument not valid\"');\r",
                  "    pm.expect(response.message).to.include('must not be blank', 'Сообщение об ошибке должно указывать что строка не может быть null');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:authorId/events/:eventId/comment",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":authorId",
                "events",
                ":eventId",
                "comment"
              ],
              "variable": [
                {
                  "key": "authorId",
                  "value": "{{authorId}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eventId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление комментария несуществующим пользователем",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"userId\", user.id);\r",
                  "\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        pm.collectionVariables.set(\"eventId\", event.id);\r",
                  "        \r",
                  "        const author = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"authorId\", author.id+1);\r",
                  "\r",
                  "        pm.request.body.update({\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(rnd.getComment()),\r",
                  "            options: { raw: { language: 'json' } }\r",
                  "        });\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "        throw err;\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "main();"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Запрос от несуществующего пользователя должен вернуть ошибку 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "\r",
                  "    const response = pm.response.json();\r",
                  "    console.log(\"Ответ сервера:\", response);\r",
                  "\r",
                  "    pm.expect(response).to.have.property('status');\r",
                  "    pm.expect(response).to.have.property('reason');\r",
                  "    pm.expect(response).to.have.property('message');\r",
                  "    pm.expect(response).to.have.property('timestamp');\r",
                  "\r",
                  "    pm.expect(response.status).to.equal('404 NOT_FOUND', 'Статус должен быть 404 NOT_FOUND');\r",
                  "    pm.expect(response.reason).to.equal('Entity not found', 'Причина должна быть \"Entity not found\"');\r",
                  "    pm.expect(response.message).to.include('User with id', 'Сообщение об ошибке должно указывать на отсутствие пользователя');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:authorId/events/:eventId/comment",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":authorId",
                "events",
                ":eventId",
                "comment"
              ],
              "variable": [
                {
                  "key": "authorId",
                  "value": "{{authorId}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eventId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление комментария к несуществующему событию",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"userId\", user.id);\r",
                  "\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        pm.collectionVariables.set(\"eventId\", event.id+1);\r",
                  "        \r",
                  "        const author = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"authorId\", author.id);\r",
                  "\r",
                  "        pm.request.body.update({\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(rnd.getComment()),\r",
                  "            options: { raw: { language: 'json' } }\r",
                  "        });\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "        throw err;\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "main();"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Попытка прокомментировать несуществующее событие должна вернуть ошибку 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "\r",
                  "    const response = pm.response.json();\r",
                  "    console.log(\"Ответ сервера:\", response);\r",
                  "\r",
                  "    pm.expect(response).to.have.property('status');\r",
                  "    pm.expect(response).to.have.property('reason');\r",
                  "    pm.expect(response).to.have.property('message');\r",
                  "    pm.expect(response).to.have.property('timestamp');\r",
                  "\r",
                  "    pm.expect(response.status).to.equal('404 NOT_FOUND', 'Статус должен быть 404 NOT_FOUND');\r",
                  "    pm.expect(response.reason).to.equal('Entity not found', 'Причина должна быть \"Entity not found\"');\r",
                  "    pm.expect(response.message).to.include('Event with id', 'Сообщение об ошибке должно указывать на отсутствие события');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:authorId/events/:eventId/comment",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":authorId",
                "events",
                ":eventId",
                "comment"
              ],
              "variable": [
                {
                  "key": "authorId",
                  "value": "{{authorId}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eventId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление комментария к неподтвержденному событию",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"userId\", user.id);\r",
                  "\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        pm.collectionVariables.set(\"eventId\", event.id);\r",
                  "        \r",
                  "        const author = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"authorId\", author.id);\r",
                  "\r",
                  "        pm.request.body.update({\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(rnd.getComment()),\r",
                  "            options: { raw: { language: 'json' } }\r",
                  "        });\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "        throw err;\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "main();"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Попытка прокомментировать неподтвержденное событие должна вернуть ошибку 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "\r",
                  "    const response = pm.response.json();\r",
                  "    console.log(\"Ответ сервера:\", response);\r",
                  "\r",
                  "    pm.expect(response).to.have.property('status');\r",
                  "    pm.expect(response).to.have.property('reason');\r",
                  "    pm.expect(response).to.have.property('message');\r",
                  "    pm.expect(response).to.have.property('timestamp');\r",
                  "\r",
                  "    pm.expect(response.status).to.equal('404 NOT_FOUND', 'Статус должен быть 404 NOT_FOUND');\r",
                  "    pm.expect(response.reason).to.equal('Get event exception', 'Причина должна быть \"Get event exception\"');\r",
                  "    pm.expect(response.message).to.include('Event must be published', 'Сообщение об ошибке должно сообщщать что событие не подтверждено');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:authorId/events/:eventId/comment",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":authorId",
                "events",
                ":eventId",
                "comment"
              ],
              "variable": [
                {
                  "key": "authorId",
                  "value": "{{authorId}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eventId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление чужого комментария",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"userId\", user.id);\r",
                  "\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        pm.collectionVariables.set(\"eventId\", event.id);\r",
                  "        \r",
                  "        const author = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"authorId\", author.id + 1);\r",
                  "        \r",
                  "        const createdComment = await api.addComment(author.id, event.id, rnd.getComment());\r",
                  "        pm.collectionVariables.set(\"commentId\", createdComment.id);\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "        throw err;\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "main();"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Попытка удаления чужого комментария должна вернуть ошибку 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "\r",
                  "    const response = pm.response.json();\r",
                  "    console.log(\"Ответ сервера:\", response);\r",
                  "\r",
                  "    pm.expect(response).to.have.property('status');\r",
                  "    pm.expect(response).to.have.property('reason');\r",
                  "    pm.expect(response).to.have.property('message');\r",
                  "    pm.expect(response).to.have.property('timestamp');\r",
                  "\r",
                  "    pm.expect(response.status).to.equal('404 NOT_FOUND', 'Статус должен быть 404 NOT_FOUND');\r",
                  "    pm.expect(response.reason).to.equal('Entity not found', 'Причина должна быть \"Entity not found\"');\r",
                  "    pm.expect(response.message).to.include('Author does not match', 'Сообщение об ошибке должно сообщщать, что автор не совпадает');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:authorId/events/:eventId:/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":authorId",
                "events",
                ":eventId:",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "authorId",
                  "value": "{{authorId}}"
                },
                {
                  "key": "eventId:",
                  "value": "{{eventId}}"
                },
                {
                  "key": "commentId",
                  "value": "{{commentId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Изменение чужого комментария",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        pm.collectionVariables.set(\"eventId\", event.id);\r",
                  "        \r",
                  "        const author = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"authorId\", author.id + 1);\r",
                  "\r",
                  "        const createdComment = await api.addComment(author.id, event.id, rnd.getComment());\r",
                  "        pm.collectionVariables.set(\"commentId\",createdComment.id)\r",
                  "\r",
                  "        pm.request.body.update({\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(rnd.getComment()),\r",
                  "            options: { raw: { language: 'json' } }\r",
                  "        });\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "        throw err;\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "main();"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Попытка изменения чужого комментария должна вернуть ошибку 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "\r",
                  "    const response = pm.response.json();\r",
                  "    console.log(\"Ответ сервера:\", response);\r",
                  "\r",
                  "    pm.expect(response).to.have.property('status');\r",
                  "    pm.expect(response).to.have.property('reason');\r",
                  "    pm.expect(response).to.have.property('message');\r",
                  "    pm.expect(response).to.have.property('timestamp');\r",
                  "\r",
                  "    pm.expect(response.status).to.equal('404 NOT_FOUND', 'Статус должен быть 404 NOT_FOUND');\r",
                  "    pm.expect(response.reason).to.equal('Entity not found', 'Причина должна быть \"Entity not found\"');\r",
                  "    pm.expect(response.message).to.include('Author does not match', 'Сообщение об ошибке должно сообщщать, что автор не совпадает');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:authorId/events/:eventId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":authorId",
                "events",
                ":eventId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "authorId",
                  "value": "{{authorId}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eventId}}"
                },
                {
                  "key": "commentId",
                  "value": "{{commentId}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Добавление нового комментария",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"userId\", user.id);\r",
              "\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        event = await api.publishEvent(event.id);\r",
              "        pm.collectionVariables.set(\"eventId\", event.id);\r",
              "        \r",
              "        const author = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"authorId\", author.id);\r",
              "\r",
              "        pm.request.body.update({\r",
              "            mode: 'raw',\r",
              "            raw: JSON.stringify(rnd.getComment()),\r",
              "            options: { raw: { language: 'json' } }\r",
              "        });\r",
              "\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "        throw err;\r",
              "    }\r",
              "};\r",
              "\r",
              "main();"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Комментарий должен содержать поля: id, text, eventId, authorId, updated\", function () {\r",
              "    pm.expect(target).to.have.property('id');\r",
              "    pm.expect(target).to.have.property('text');\r",
              "    pm.expect(target).to.have.property('eventId');\r",
              "    pm.expect(target).to.have.property('authorId');\r",
              "    pm.expect(target).to.have.property('updated');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(target.text).to.equal(source.text, 'Комментарий пользователя должен соответствовать комментарию пользователя в запросе');\r",
              "    pm.expect(target.eventId).to.equal(parseInt(pm.collectionVariables.get(\"eventId\")), 'ID события в ответе должен соответствовать переданному eventId');\r",
              "    pm.expect(target.authorId).to.equal(parseInt(pm.collectionVariables.get(\"authorId\")), 'ID автора в ответе должен соответствовать переданному userId');\r",
              "\r",
              "    \r",
              "    const moment = require('moment');\r",
              "    const now = moment()\r",
              "    const updatedDate = moment(target.updated, 'YYYY-MM-DD HH:mm:ss', true).add(2, 'hours');\r",
              "\r",
              "    const diff = now.diff(updatedDate, 'seconds');\r",
              "    pm.expect(Math.abs(diff)).to.be.below(30, 'Дата обновления должна быть близка к текущему времени');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:authorId/events/:eventId/comment",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":authorId",
            "events",
            ":eventId",
            "comment"
          ],
          "variable": [
            {
              "key": "authorId",
              "value": "{{authorId}}"
            },
            {
              "key": "eventId",
              "value": "{{eventId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение комментария по id",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm); \r",
              "    const rnd = new RandomUtils();\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"userId\", user.id);\r",
              "\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "\r",
              "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        event = await api.publishEvent(event.id);\r",
              "        pm.collectionVariables.set(\"eventId\", event.id);\r",
              "\r",
              "        const author = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"authorId\", author.id);\r",
              "        \r",
              "        const createdComment = await api.addComment(author.id, event.id, rnd.getComment());\r",
              "        pm.collectionVariables.set(\"commentId\", createdComment.id);\r",
              "        pm.collectionVariables.set(\"createdComment\", JSON.stringify(createdComment));\r",
              "\r",
              "\r",
              "    } catch (err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных: \", err);\r",
              "        throw err;\r",
              "    }\r",
              "};\r",
              "main();"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.collectionVariables.get(\"createdComment\"));\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Комментарий должен содержать поля: id, text, eventId, authorId, updated\", function () {\r",
              "    pm.expect(target).to.have.property('id');\r",
              "    pm.expect(target).to.have.property('text');\r",
              "    pm.expect(target).to.have.property('eventId');\r",
              "    pm.expect(target).to.have.property('authorId');\r",
              "    pm.expect(target).to.have.property('updated');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(target.text).to.equal(source.text, 'Комментарий пользователя должен соответствовать комментарию пользователя в запросе');\r",
              "    pm.expect(target.eventId).to.equal(parseInt(pm.collectionVariables.get(\"eventId\")), 'ID события в ответе должен соответствовать переданному eventId');\r",
              "    pm.expect(target.authorId).to.equal(parseInt(pm.collectionVariables.get(\"authorId\")), 'ID автора в ответе должен соответствовать переданному userId');\r",
              "    \r",
              "    const moment = require('moment');\r",
              "    const now = moment();\r",
              "    const updatedDate = moment(target.updated, 'YYYY-MM-DD HH:mm:ss', true).add(2, 'hours');\r",
              "\r",
              "    const diff = now.diff(updatedDate, 'seconds');\r",
              "    pm.expect(Math.abs(diff)).to.be.below(30, 'Дата обновления должна быть близка к текущему времени');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "{{commentId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение комментариев к событию",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm); \r",
              "    const rnd = new RandomUtils();\r",
              "    try {\r",
              "        pm.collectionVariables.set(\"size\", rnd.randInt(1, 10));\r",
              "\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"userId\", user.id);\r",
              "\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "\r",
              "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        event = await api.publishEvent(event.id);\r",
              "        pm.collectionVariables.set(\"eventId\", event.id);\r",
              "       \r",
              "        const createdComments = [];\r",
              "        const numberOfComments = pm.collectionVariables.get(\"size\");\r",
              "\r",
              "        for (let i = 0; i < numberOfComments; i++) {\r",
              "            const comment = {\r",
              "                text: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
              "            };\r",
              "        \r",
              "            if (comment.text.length < 20) {\r",
              "                comment.text = comment.text.padEnd(20, \" \");\r",
              "            } else if (comment.text.length > 2000) {\r",
              "                comment.text = comment.text.substring(0, 2000);\r",
              "            }\r",
              "            const author = await api.addUser(rnd.getUser());\r",
              "\r",
              "            const createdComment = await api.addComment(author.id, event.id, comment);\r",
              "            createdComments.push(createdComment);\r",
              "        }\r",
              "\r",
              "        pm.collectionVariables.set(\"createdComments\", JSON.stringify(createdComments));\r",
              "\r",
              "    } catch (err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных: \", err);\r",
              "        throw err;\r",
              "    }\r",
              "};\r",
              "main();"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const response = pm.response.json();\r",
              "const createdComments = JSON.parse(pm.collectionVariables.get(\"createdComments\"));\r",
              "const size = parseInt(pm.collectionVariables.get(\"size\"));\r",
              "\r",
              "pm.test(\"Ответ должен быть массивом комментариев\", function () {\r",
              "    pm.expect(Array.isArray(response)).to.be.true;\r",
              "    pm.expect(response.length).to.equal(size, \r",
              "        `Количество комментариев в ответе должно быть равно size=${size}`);\r",
              "});\r",
              "\r",
              "pm.test(\"Каждый комментарий должен содержать обязательные поля\", function () {\r",
              "    response.forEach(comment => {\r",
              "        pm.expect(comment.id).to.not.be.null;\r",
              "        pm.expect(comment.text).to.not.be.null;\r",
              "        pm.expect(comment.authorId).to.not.be.null;\r",
              "        pm.expect(comment.eventId).to.equal(parseInt(pm.collectionVariables.get(\"eventId\")), 'ID события в ответе должен соответствовать переданному eventId');\r",
              "        pm.expect(comment.updated).to.not.be.null;\r",
              "    });\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/comments/events/:eventId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "events",
            ":eventId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "{{eventId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Измененик комментария пользователем",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        event = await api.publishEvent(event.id);\r",
              "        pm.collectionVariables.set(\"eventId\", event.id);\r",
              "        \r",
              "        const author = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"authorId\", author.id);\r",
              "\r",
              "        const createdComment = await api.addComment(author.id, event.id, rnd.getComment());\r",
              "        pm.collectionVariables.set(\"commentId\",createdComment.id)\r",
              "        pm.collectionVariables.set(\"commentTextBeforUpdate\",createdComment.text);\r",
              "\r",
              "        pm.request.body.update({\r",
              "            mode: 'raw',\r",
              "            raw: JSON.stringify(rnd.getComment()),\r",
              "            options: { raw: { language: 'json' } }\r",
              "        });\r",
              "\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "        throw err;\r",
              "    }\r",
              "};\r",
              "\r",
              "main();"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Комментарий должен содержать поля: id, text, eventId, authorId, updated\", function () {\r",
              "    pm.expect(target).to.have.property('id');\r",
              "    pm.expect(target).to.have.property('text');\r",
              "    pm.expect(target).to.have.property('eventId');\r",
              "    pm.expect(target).to.have.property('authorId');\r",
              "    pm.expect(target).to.have.property('updated');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(target.text).to.equal(source.text, 'Комментарий пользователя должен соответствовать комментарию пользователя в запросе');\r",
              "    pm.expect(target.text).to.not.equal('commentTextBeforUpdate', 'Комментарий пользователя должен отличаться от предыдущего комментария');\r",
              "    pm.expect(target.eventId).to.equal(parseInt(pm.collectionVariables.get(\"eventId\")), 'ID события в ответе должен соответствовать переданному eventId');\r",
              "    pm.expect(target.authorId).to.equal(parseInt(pm.collectionVariables.get(\"authorId\")), 'ID автора в ответе должен соответствовать переданному userId');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:authorId/events/:eventId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":authorId",
            "events",
            ":eventId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "authorId",
              "value": "{{authorId}}"
            },
            {
              "key": "eventId",
              "value": "{{eventId}}"
            },
            {
              "key": "commentId",
              "value": "{{commentId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление комментария пользователем",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"userId\", user.id);\r",
              "\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        event = await api.publishEvent(event.id);\r",
              "        pm.collectionVariables.set(\"eventId\", event.id);\r",
              "        \r",
              "        const author = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"authorId\", author.id);\r",
              "        \r",
              "        const createdComment = await api.addComment(author.id, event.id, rnd.getComment());\r",
              "        pm.collectionVariables.set(\"commentId\", createdComment.id);\r",
              "\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "        throw err;\r",
              "    }\r",
              "};\r",
              "\r",
              "main();"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
              "    pm.response.to.have.status(204);  \r",
              "});\r",
              "\r",
              "pm.test(\"Response has no body\", function () {\r",
              "    pm.expect(pm.response.text()).to.eql(\"\");\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:authorId/events/:eventId:/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":authorId",
            "events",
            ":eventId:",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "authorId",
              "value": "{{authorId}}"
            },
            {
              "key": "eventId:",
              "value": "{{eventId}}"
            },
            {
              "key": "commentId",
              "value": "{{commentId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление комментария админом",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"userId\", user.id);\r",
              "\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        event = await api.publishEvent(event.id);\r",
              "        pm.collectionVariables.set(\"eventId\", event.id);\r",
              "        \r",
              "        const author = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"authorId\", author.id);\r",
              "        \r",
              "        const createdComment = await api.addComment(author.id, event.id, rnd.getComment());\r",
              "        pm.collectionVariables.set(\"commentId\", createdComment.id);\r",
              "\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "        throw err;\r",
              "    }\r",
              "};\r",
              "\r",
              "main();"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
              "    pm.response.to.have.status(204);  \r",
              "});\r",
              "\r",
              "pm.test(\"Response has no body\", function () {\r",
              "    pm.expect(pm.response.text()).to.eql(\"\");\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "{{commentId}}"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          "API = class {\r",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
          "        this.baseUrl = baseUrl;\r",
          "        this.pm = postman;\r",
          "        this._verbose = verbose;\r",
          "    }\r",
          "\r",
          "    async addUser(user, verbose=null) {\r",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addCategory(category, verbose=null) {\r",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addEvent(userId, event, verbose=null) {\r",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addCompilation(compilation, verbose=null) {\r",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addComment(userId, eventId, comment, verbose = null) {\r",
          "        return this.post(\"/users/\" + userId + \"/events/\" + eventId + \"/comment\", comment, \"Ошибка при добавлении комментария: \", verbose);\r",
          "    }\r",
          "\r",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {\r",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);\r",
          "    }\r",
          "\r",
          "    async publishEvent(eventId, verbose=null) {\r",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
          "    }\r",
          "    \r",
          "    async rejectEvent(eventId, verbose=null) {\r",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);\r",
          "    }\r",
          "\r",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {\r",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);\r",
          "    }\r",
          "\r",
          "    async findCategory(catId, verbose=null) {\r",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async findCompilation(compId, verbose=null) {\r",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async findEvent(eventId, verbose=null) {\r",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async findUser(userId, verbose=null) {\r",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
          "    }\r",
          "\r",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
          "    }\r",
          "\r",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
          "    }\r",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
          "        return new Promise((resolve, reject) => {\r",
          "            verbose = verbose == null ? this._verbose : verbose;\r",
          "            const request = {\r",
          "                url: this.baseUrl + path,\r",
          "                method: method,\r",
          "                body: body == null ? \"\" : JSON.stringify(body),\r",
          "                header: { \"Content-Type\": \"application/json\" },\r",
          "            };\r",
          "            if(verbose) {\r",
          "                console.log(\"Отправляю запрос: \", request);\r",
          "            }\r",
          "\r",
          "            try {\r",
          "                this.pm.sendRequest(request, (error, response) => {\r",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
          "                        let err = error ? error : JSON.stringify(response.json());\r",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
          "\r",
          "                        reject(new Error(errorText + err));\r",
          "                    }\r",
          "                    if(verbose) {\r",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
          "                    }\r",
          "                    if (response.stream.length === 0){\r",
          "                        reject(new Error('Отправлено пустое тело ответа'))\r",
          "                    }else{\r",
          "                        resolve(response.json());\r",
          "                    }\r",
          "                });\r",
          "                \r",
          "            } catch(err) {\r",
          "                if(verbose) {\r",
          "                    console.error(errorText, err);\r",
          "                }\r",
          "                return Promise.reject(err);\r",
          "            }\r",
          "        });\r",
          "    }\r",
          "};\r",
          "\r",
          "RandomUtils = class {\r",
          "    constructor() {}\r",
          "\r",
          "    getUser() {\r",
          "        return {\r",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getCategory() {\r",
          "        return {\r",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getComment() {\r",
          "        \r",
          "        const comment = {\r",
          "            text: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
          "        };\r",
          "\r",
          "        if (comment.text.length < 20) {\r",
          "            comment.text = comment.text.padEnd(20, ' ');\r",
          "        } else if (comment.text.length > 2000) {\r",
          "            comment.text = comment.text.substring(0, 2000);\r",
          "        }\r",
          "\r",
          "        return comment;\r",
          "    }\r",
          "\r",
          "    getEvent(categoryId) {\r",
          "        return {\r",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
          "            category: categoryId,\r",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
          "            eventDate: this.getFutureDateTime(),\r",
          "            location: {\r",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
          "            },\r",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
          "        }\r",
          "    }\r",
          "\r",
          "    getCompilation(...eventIds) {\r",
          "        return {\r",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
          "            events: eventIds\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
          "        let moment = require('moment');\r",
          "\r",
          "        let m = moment();\r",
          "        m.add(hourShift, 'hour');\r",
          "        m.add(minuteShift, 'minute');\r",
          "        m.add(yearShift, 'year');\r",
          "\r",
          "        return m.format('YYYY-MM-DD HH:mm:ss');\r",
          "    }\r",
          "    randInt(min, max) {\r",
          "        return Math.round((Math.random() * Math.abs(max - min)) + min);\r",
          "        }\r",
          "\r",
          "    getWord(length = 1) {\r",
          "        let result = '';\r",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
          "        const charactersLength = characters.length;\r",
          "        let counter = 0;\r",
          "        while (counter < length) {\r",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
          "            counter += 1;\r",
          "        }\r",
          "        return result;\r",
          "    }\r",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "eventId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "authorId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "commentId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "createdComment",
      "value": "",
      "type": "string"
    },
    {
      "key": "size",
      "value": "5",
      "type": "string"
    },
    {
      "key": "createdComments",
      "value": "",
      "type": "string"
    },
    {
      "key": "commentTextBeforUpdate",
      "value": "",
      "type": "string"
    }
  ]
}